# -*- coding: utf-8 -*-
"""Visualization_finetuning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18pxQYIvyRKOOwjTvmYB9PIaHv06nt9_v
"""

! pip install matplotlib

import matplotlib.pyplot as plt

"""# Visualization for loss"""

training_loss = [0.5307, 0.4071, 0.3301, 0.2752]
validation_loss = [0.549215, 0.524176, 0.517817, 0.520144]
epochs = [1, 2, 3, 4]

# Plotting the training and validation loss
plt.figure(figsize=(10, 6))
plt.plot(epochs, training_loss, label='Training Loss', marker='o')
plt.plot(epochs, validation_loss, label='Validation Loss', marker='o')
plt.title('Fine-tuning Small Dataset')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

"""# Visualization for BLUE and COMET"""

# Data setup
models = ['M2M100_original', 'Finetuned_small', 'Finetuned_large', 'Google Translate']
bleu_scores = [26.17, 29.82, 32.12, 40.37]
comet_scores = [0.41, 0.45, 0.47, 0.66]

fig, ax1 = plt.subplots()

# Bar chart for BLEU scores
color = 'tab:blue'
ax1.set_ylabel('BLEU Score', color=color)
bars = ax1.bar(models, bleu_scores, color=[color if model != "Google Translate" else 'gray' for model in models])
ax1.tick_params(axis='y', labelcolor=color)
ax1.set_ylim(0, 45)

# Adding text labels to the bars
for bar in bars:
    yval = bar.get_height()
    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), verticalalignment='bottom',  # verticalalignment can be adjusted as 'bottom' or 'center'
             ha='center', color=color)

# Line chart for COMET scores
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
color = 'tab:red'
ax2.set_ylabel('COMET Score', color=color)  # we already handled the x-label with ax1
line, = ax2.plot(models, comet_scores, color=color, marker='o', linestyle='-')
ax2.tick_params(axis='y', labelcolor=color)
ax2.set_ylim(0.30, 0.80)  # Adjust the scale according to your data

# Adding text labels to the line points
for i, txt in enumerate(comet_scores):
    ax2.annotate(round(txt, 2), (models[i], comet_scores[i]), textcoords="offset points", xytext=(0,10), ha='center')

fig.tight_layout()  # to handle the overlap
plt.show()